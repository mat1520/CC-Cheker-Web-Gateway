# Docker Compose - Demo Version
version: '3.8'

services:
  # Demo CC Checker Application
  cc-checker-demo:
    build: .
    ports:
      - "5000:5000"
      - "8000:8000"  # Static file server
    environment:
      - DEMO_MODE=true
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:///demo.db
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - redis-demo
    restart: unless-stopped
    labels:
      - "demo.cc-checker.service=web"
      - "demo.cc-checker.version=2.0.0"

  # Redis for Demo (Cache & Rate Limiting)
  redis-demo:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_demo_data:/data
    restart: unless-stopped
    labels:
      - "demo.cc-checker.service=redis"

  # Demo Database (PostgreSQL)
  postgres-demo:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cc_checker_demo
      POSTGRES_USER: demo_user
      POSTGRES_PASSWORD: demo_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_demo_data:/var/lib/postgresql/data
    restart: unless-stopped
    labels:
      - "demo.cc-checker.service=database"

  # Demo Monitoring (Prometheus)
  prometheus-demo:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    labels:
      - "demo.cc-checker.service=monitoring"

volumes:
  redis_demo_data:
  postgres_demo_data:

networks:
  default:
    name: cc-checker-demo-network

# Demo Docker Compose Configuration
# 
# To start the demo:
# docker-compose up -d
#
# To view logs:
# docker-compose logs -f cc-checker-demo
#
# To stop the demo:
# docker-compose down
#
# Note: This is a demo configuration
# Full version includes:
# - Production-grade security
# - SSL/TLS configuration
# - Load balancing
# - Backup strategies
# - Monitoring & alerting
# - Log aggregation
# - Auto-scaling
#
# Contact @mat1520 for production Docker setup
